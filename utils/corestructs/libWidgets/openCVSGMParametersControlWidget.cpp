/**
 * \file openCVSGMParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "openCVSGMParametersControlWidget.h"
#include "ui_openCVSGMParametersControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


OpenCVSGMParametersControlWidget::OpenCVSGMParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::OpenCVSGMParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->preFilterCapSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->sADWindowSizeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->p1MultiplierSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->p2MultiplierSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->minDisparitySpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->uniquenessRatioSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->speckleWindowSizeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->speckleRangeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->disp12MaxDiffSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->fullDPCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
}

OpenCVSGMParametersControlWidget::~OpenCVSGMParametersControlWidget()
{

    delete mUi;
}

void OpenCVSGMParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    OpenCVSGMParameters *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void OpenCVSGMParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    OpenCVSGMParameters *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void OpenCVSGMParametersControlWidget::getParameters(OpenCVSGMParameters& params) const
{

    params.setPreFilterCap     (mUi->preFilterCapSpinBox->value());
    params.setSADWindowSize    (mUi->sADWindowSizeSpinBox->value());
    params.setP1Multiplier     (mUi->p1MultiplierSpinBox->value());
    params.setP2Multiplier     (mUi->p2MultiplierSpinBox->value());
    params.setMinDisparity     (mUi->minDisparitySpinBox->value());
    params.setUniquenessRatio  (mUi->uniquenessRatioSpinBox->value());
    params.setSpeckleWindowSize(mUi->speckleWindowSizeSpinBox->value());
    params.setSpeckleRange     (mUi->speckleRangeSpinBox->value());
    params.setDisp12MaxDiff    (mUi->disp12MaxDiffSpinBox->value());
    params.setFullDP           (mUi->fullDPCheckBox->isChecked());

}

OpenCVSGMParameters *OpenCVSGMParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    OpenCVSGMParameters *result = new OpenCVSGMParameters(
          mUi->preFilterCapSpinBox->value()
        , mUi->sADWindowSizeSpinBox->value()
        , mUi->p1MultiplierSpinBox->value()
        , mUi->p2MultiplierSpinBox->value()
        , mUi->minDisparitySpinBox->value()
        , mUi->uniquenessRatioSpinBox->value()
        , mUi->speckleWindowSizeSpinBox->value()
        , mUi->speckleRangeSpinBox->value()
        , mUi->disp12MaxDiffSpinBox->value()
        , mUi->fullDPCheckBox->isChecked()
    );
    return result;
}

void OpenCVSGMParametersControlWidget::setParameters(const OpenCVSGMParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->preFilterCapSpinBox->setValue(input.preFilterCap());
    mUi->sADWindowSizeSpinBox->setValue(input.sADWindowSize());
    mUi->p1MultiplierSpinBox->setValue(input.p1Multiplier());
    mUi->p2MultiplierSpinBox->setValue(input.p2Multiplier());
    mUi->minDisparitySpinBox->setValue(input.minDisparity());
    mUi->uniquenessRatioSpinBox->setValue(input.uniquenessRatio());
    mUi->speckleWindowSizeSpinBox->setValue(input.speckleWindowSize());
    mUi->speckleRangeSpinBox->setValue(input.speckleRange());
    mUi->disp12MaxDiffSpinBox->setValue(input.disp12MaxDiff());
    mUi->fullDPCheckBox->setChecked(input.fullDP());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void OpenCVSGMParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    OpenCVSGMParameters *inputCasted = static_cast<OpenCVSGMParameters *>(input);
    setParameters(*inputCasted);
}
