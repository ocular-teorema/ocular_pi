/**
 * \file headSearchParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "headSearchParametersControlWidget.h"
#include "ui_headSearchParametersControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


HeadSearchParametersControlWidget::HeadSearchParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::HeadSearchParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->thresholdDistanceSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->clusterDepthSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->clusterMinSizeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->headAreaRadiusSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->headNumberSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

HeadSearchParametersControlWidget::~HeadSearchParametersControlWidget()
{

    delete mUi;
}

void HeadSearchParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    HeadSearchParameters *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void HeadSearchParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    HeadSearchParameters *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void HeadSearchParametersControlWidget::getParameters(HeadSearchParameters& params) const
{

    params.setThresholdDistance(mUi->thresholdDistanceSpinBox->value());
    params.setClusterDepth     (mUi->clusterDepthSpinBox->value());
    params.setClusterMinSize   (mUi->clusterMinSizeSpinBox->value());
    params.setHeadAreaRadius   (mUi->headAreaRadiusSpinBox->value());
    params.setHeadNumber       (mUi->headNumberSpinBox->value());

}

HeadSearchParameters *HeadSearchParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    HeadSearchParameters *result = new HeadSearchParameters(
          mUi->thresholdDistanceSpinBox->value()
        , mUi->clusterDepthSpinBox->value()
        , mUi->clusterMinSizeSpinBox->value()
        , mUi->headAreaRadiusSpinBox->value()
        , mUi->headNumberSpinBox->value()
    );
    return result;
}

void HeadSearchParametersControlWidget::setParameters(const HeadSearchParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->thresholdDistanceSpinBox->setValue(input.thresholdDistance());
    mUi->clusterDepthSpinBox->setValue(input.clusterDepth());
    mUi->clusterMinSizeSpinBox->setValue(input.clusterMinSize());
    mUi->headAreaRadiusSpinBox->setValue(input.headAreaRadius());
    mUi->headNumberSpinBox->setValue(input.headNumber());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void HeadSearchParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    HeadSearchParameters *inputCasted = static_cast<HeadSearchParameters *>(input);
    setParameters(*inputCasted);
}
