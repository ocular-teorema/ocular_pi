/**
 * \file lensDistortionModelParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "lensDistortionModelParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<LensDistortionModelParameters>::reflection = Reflection();
template<>
int BaseReflection<LensDistortionModelParameters>::dummy = LensDistortionModelParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int LensDistortionModelParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Lens Distortion Model Parameters",
        "Lens Distortion Model Parameters",
        ""
    );
     

    fields().push_back(
        new DoubleField
        (
          LensDistortionModelParameters::PRINCIPALX_ID,
          offsetof(LensDistortionModelParameters, mPrincipalX),
          240,
          "principalX",
          "principalX",
          "The center of the distortion \f$x_c\f$"
        )
    );
    fields().push_back(
        new DoubleField
        (
          LensDistortionModelParameters::PRINCIPALY_ID,
          offsetof(LensDistortionModelParameters, mPrincipalY),
          320,
          "principalY",
          "principalY",
          "The center of the distortion \f$y_c\f$"
        )
    );
    fields().push_back(
        new DoubleField
        (
          LensDistortionModelParameters::TANGENTIALX_ID,
          offsetof(LensDistortionModelParameters, mTangentialX),
          0,
          "tangentialX",
          "tangentialX",
          "First tangent correction coefficient - \f$p_1\f$"
        )
    );
    fields().push_back(
        new DoubleField
        (
          LensDistortionModelParameters::TANGENTIALY_ID,
          offsetof(LensDistortionModelParameters, mTangentialY),
          0,
          "tangentialY",
          "tangentialY",
          "Second tangent correction coefficient - \f$p_2\f$"
        )
    );
    fields().push_back(
        new DoubleVectorField
        (
          LensDistortionModelParameters::KOEFF_ID,
          offsetof(LensDistortionModelParameters, mKoeff),
          0,
          0,
          "koeff",
          "koeff",
          "Polynom to describe radial correction"
        )
    );
    fields().push_back(
        new DoubleField
        (
          LensDistortionModelParameters::ASPECT_ID,
          offsetof(LensDistortionModelParameters, mAspect),
          1,
          "aspect",
          "aspect",
          "aspect"
        )
    );
    fields().push_back(
        new DoubleField
        (
          LensDistortionModelParameters::SCALE_ID,
          offsetof(LensDistortionModelParameters, mScale),
          1,
          "scale",
          "scale",
          "scale"
        )
    );
    fields().push_back(
        new DoubleField
        (
          LensDistortionModelParameters::NORMALIZING_FOCAL_ID,
          offsetof(LensDistortionModelParameters, mNormalizingFocal),
          1,
          "Normalizing Focal",
          "Normalizing Focal",
          "Normalizing Focal"
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


