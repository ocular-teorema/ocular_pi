/**
 * \file objectDetectionParamsControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "objectDetectionParamsControlWidget.h"
#include "ui_objectDetectionParamsControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


ObjectDetectionParamsControlWidget::ObjectDetectionParamsControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::ObjectDetectionParamsControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->debugObjectsCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->experimentalCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->minimumClusterSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->dilateSizeSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->bgThresholdSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->fgThresholdSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
}

ObjectDetectionParamsControlWidget::~ObjectDetectionParamsControlWidget()
{

    delete mUi;
}

void ObjectDetectionParamsControlWidget::loadParamWidget(WidgetLoader &loader)
{
    ObjectDetectionParams *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void ObjectDetectionParamsControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    ObjectDetectionParams *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void ObjectDetectionParamsControlWidget::getParameters(ObjectDetectionParams& params) const
{

    params.setDebugObjects     (mUi->debugObjectsCheckBox->isChecked());
    params.setExperimental     (mUi->experimentalCheckBox->isChecked());
    params.setMinimumCluster   (mUi->minimumClusterSpinBox->value());
    params.setDilateSize       (mUi->dilateSizeSpinBox->value());
    params.setBgThreshold      (mUi->bgThresholdSpinBox->value());
    params.setFgThreshold      (mUi->fgThresholdSpinBox->value());

}

ObjectDetectionParams *ObjectDetectionParamsControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    ObjectDetectionParams *result = new ObjectDetectionParams(
          mUi->debugObjectsCheckBox->isChecked()
        , mUi->experimentalCheckBox->isChecked()
        , mUi->minimumClusterSpinBox->value()
        , mUi->dilateSizeSpinBox->value()
        , mUi->bgThresholdSpinBox->value()
        , mUi->fgThresholdSpinBox->value()
    );
    return result;
}

void ObjectDetectionParamsControlWidget::setParameters(const ObjectDetectionParams &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->debugObjectsCheckBox->setChecked(input.debugObjects());
    mUi->experimentalCheckBox->setChecked(input.experimental());
    mUi->minimumClusterSpinBox->setValue(input.minimumCluster());
    mUi->dilateSizeSpinBox->setValue(input.dilateSize());
    mUi->bgThresholdSpinBox->setValue(input.bgThreshold());
    mUi->fgThresholdSpinBox->setValue(input.fgThreshold());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void ObjectDetectionParamsControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    ObjectDetectionParams *inputCasted = static_cast<ObjectDetectionParams *>(input);
    setParameters(*inputCasted);
}
