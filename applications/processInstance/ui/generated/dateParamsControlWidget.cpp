/**
 * \file dateParamsControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "dateParamsControlWidget.h"
#include "ui_dateParamsControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


DateParamsControlWidget::DateParamsControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::DateParamsControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->useVirtualDateCheckBox, SIGNAL(stateChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->yearSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->monthSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->daySpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->hourSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->minuteSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

DateParamsControlWidget::~DateParamsControlWidget()
{

    delete mUi;
}

void DateParamsControlWidget::loadParamWidget(WidgetLoader &loader)
{
    DateParams *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void DateParamsControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    DateParams *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void DateParamsControlWidget::getParameters(DateParams& params) const
{

    params.setUseVirtualDate   (mUi->useVirtualDateCheckBox->isChecked());
    params.setYear             (mUi->yearSpinBox->value());
    params.setMonth            (mUi->monthSpinBox->value());
    params.setDay              (mUi->daySpinBox->value());
    params.setHour             (mUi->hourSpinBox->value());
    params.setMinute           (mUi->minuteSpinBox->value());

}

DateParams *DateParamsControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    DateParams *result = new DateParams(
          mUi->useVirtualDateCheckBox->isChecked()
        , mUi->yearSpinBox->value()
        , mUi->monthSpinBox->value()
        , mUi->daySpinBox->value()
        , mUi->hourSpinBox->value()
        , mUi->minuteSpinBox->value()
    );
    return result;
}

void DateParamsControlWidget::setParameters(const DateParams &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->useVirtualDateCheckBox->setChecked(input.useVirtualDate());
    mUi->yearSpinBox->setValue(input.year());
    mUi->monthSpinBox->setValue(input.month());
    mUi->daySpinBox->setValue(input.day());
    mUi->hourSpinBox->setValue(input.hour());
    mUi->minuteSpinBox->setValue(input.minute());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void DateParamsControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    DateParams *inputCasted = static_cast<DateParams *>(input);
    setParameters(*inputCasted);
}
