/**
 * \file eventProcessingParamsControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "eventProcessingParamsControlWidget.h"
#include "ui_eventProcessingParamsControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


EventProcessingParamsControlWidget::EventProcessingParamsControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::EventProcessingParamsControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->minimalEventDurationXSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->maximalEventDurationYSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->idleEventDurationZSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->ignoreIntervalWSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
}

EventProcessingParamsControlWidget::~EventProcessingParamsControlWidget()
{

    delete mUi;
}

void EventProcessingParamsControlWidget::loadParamWidget(WidgetLoader &loader)
{
    EventProcessingParams *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void EventProcessingParamsControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    EventProcessingParams *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void EventProcessingParamsControlWidget::getParameters(EventProcessingParams& params) const
{

    params.setMinimalEventDurationX(mUi->minimalEventDurationXSpinBox->value());
    params.setMaximalEventDurationY(mUi->maximalEventDurationYSpinBox->value());
    params.setIdleEventDurationZ(mUi->idleEventDurationZSpinBox->value());
    params.setIgnoreIntervalW  (mUi->ignoreIntervalWSpinBox->value());

}

EventProcessingParams *EventProcessingParamsControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    EventProcessingParams *result = new EventProcessingParams(
          mUi->minimalEventDurationXSpinBox->value()
        , mUi->maximalEventDurationYSpinBox->value()
        , mUi->idleEventDurationZSpinBox->value()
        , mUi->ignoreIntervalWSpinBox->value()
    );
    return result;
}

void EventProcessingParamsControlWidget::setParameters(const EventProcessingParams &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->minimalEventDurationXSpinBox->setValue(input.minimalEventDurationX());
    mUi->maximalEventDurationYSpinBox->setValue(input.maximalEventDurationY());
    mUi->idleEventDurationZSpinBox->setValue(input.idleEventDurationZ());
    mUi->ignoreIntervalWSpinBox->setValue(input.ignoreIntervalW());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void EventProcessingParamsControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    EventProcessingParams *inputCasted = static_cast<EventProcessingParams *>(input);
    setParameters(*inputCasted);
}
