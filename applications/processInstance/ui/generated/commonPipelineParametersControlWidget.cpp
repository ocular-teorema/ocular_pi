/**
 * \file commonPipelineParametersControlWidget.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "commonPipelineParametersControlWidget.h"
#include "ui_commonPipelineParametersControlWidget.h"
#include "qSettingsGetter.h"
#include "qSettingsSetter.h"


CommonPipelineParametersControlWidget::CommonPipelineParametersControlWidget(QWidget *parent, bool _autoInit, QString _rootPath)
    : ParametersControlWidgetBase(parent)
    , mUi(new Ui::CommonPipelineParametersControlWidget)
    , autoInit(_autoInit)
    , rootPath(_rootPath)
{
    mUi->setupUi(this);

    QObject::connect(mUi->pipelineNameEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->cameraNameEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->serverAddressEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->fpsSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->globalScaleSpinBox, SIGNAL(valueChanged(double)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->inputStreamUrlEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->outputUrlEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->sourceOutputUrlEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->scaledOutputUrlEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->databasePathEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->archivePathEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->outputStreamBitrateSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->processingIntervalSecSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->statisticIntervalSecSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->statisticPeriodDaysSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationEventTypesSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationEventLevelSpinBox, SIGNAL(valueChanged(int)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationMethodEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationStartTimeEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationEndTimeEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationPhoneEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationEmailEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationSyserrEmailEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationSmsLoginEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationSmsPasswordEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationSmtpAddressEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationSmtpLoginEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
    QObject::connect(mUi->notificationSmtpPasswordEdit, SIGNAL(textChanged(QString)), this, SIGNAL(paramsChanged()));
}

CommonPipelineParametersControlWidget::~CommonPipelineParametersControlWidget()
{

    delete mUi;
}

void CommonPipelineParametersControlWidget::loadParamWidget(WidgetLoader &loader)
{
    CommonPipelineParameters *params = createParameters();
    loader.loadParameters(*params, rootPath);
    setParameters(*params);
    delete params;
}

void CommonPipelineParametersControlWidget::saveParamWidget(WidgetSaver  &saver)
{
    CommonPipelineParameters *params = createParameters();
    saver.saveParameters(*params, rootPath);
    delete params;
}

 /* Composite fields are NOT supported so far */
void CommonPipelineParametersControlWidget::getParameters(CommonPipelineParameters& params) const
{

    params.setPipelineName     (mUi->pipelineNameEdit->text().toStdString());
    params.setCameraName       (mUi->cameraNameEdit->text().toStdString());
    params.setServerAddress    (mUi->serverAddressEdit->text().toStdString());
    params.setFps              (mUi->fpsSpinBox->value());
    params.setGlobalScale      (mUi->globalScaleSpinBox->value());
    params.setInputStreamUrl   (mUi->inputStreamUrlEdit->text().toStdString());
    params.setOutputUrl        (mUi->outputUrlEdit->text().toStdString());
    params.setSourceOutputUrl  (mUi->sourceOutputUrlEdit->text().toStdString());
    params.setScaledOutputUrl  (mUi->scaledOutputUrlEdit->text().toStdString());
    params.setDatabasePath     (mUi->databasePathEdit->text().toStdString());
    params.setArchivePath      (mUi->archivePathEdit->text().toStdString());
    params.setOutputStreamBitrate(mUi->outputStreamBitrateSpinBox->value());
    params.setProcessingIntervalSec(mUi->processingIntervalSecSpinBox->value());
    params.setStatisticIntervalSec(mUi->statisticIntervalSecSpinBox->value());
    params.setStatisticPeriodDays(mUi->statisticPeriodDaysSpinBox->value());
    params.setNotificationEventTypes(mUi->notificationEventTypesSpinBox->value());
    params.setNotificationEventLevel(mUi->notificationEventLevelSpinBox->value());
    params.setNotificationMethod(mUi->notificationMethodEdit->text().toStdString());
    params.setNotificationStartTime(mUi->notificationStartTimeEdit->text().toStdString());
    params.setNotificationEndTime(mUi->notificationEndTimeEdit->text().toStdString());
    params.setNotificationPhone(mUi->notificationPhoneEdit->text().toStdString());
    params.setNotificationEmail(mUi->notificationEmailEdit->text().toStdString());
    params.setNotificationSyserrEmail(mUi->notificationSyserrEmailEdit->text().toStdString());
    params.setNotificationSmsLogin(mUi->notificationSmsLoginEdit->text().toStdString());
    params.setNotificationSmsPassword(mUi->notificationSmsPasswordEdit->text().toStdString());
    params.setNotificationSmtpAddress(mUi->notificationSmtpAddressEdit->text().toStdString());
    params.setNotificationSmtpLogin(mUi->notificationSmtpLoginEdit->text().toStdString());
    params.setNotificationSmtpPassword(mUi->notificationSmtpPasswordEdit->text().toStdString());

}

CommonPipelineParameters *CommonPipelineParametersControlWidget::createParameters() const
{

    /**
     * We should think of returning parameters by value or saving them in a preallocated place
     **/


    CommonPipelineParameters *result = new CommonPipelineParameters(
          mUi->pipelineNameEdit->text().toStdString()
        , mUi->cameraNameEdit->text().toStdString()
        , mUi->serverAddressEdit->text().toStdString()
        , mUi->fpsSpinBox->value()
        , mUi->globalScaleSpinBox->value()
        , mUi->inputStreamUrlEdit->text().toStdString()
        , mUi->outputUrlEdit->text().toStdString()
        , mUi->sourceOutputUrlEdit->text().toStdString()
        , mUi->scaledOutputUrlEdit->text().toStdString()
        , mUi->databasePathEdit->text().toStdString()
        , mUi->archivePathEdit->text().toStdString()
        , mUi->outputStreamBitrateSpinBox->value()
        , mUi->processingIntervalSecSpinBox->value()
        , mUi->statisticIntervalSecSpinBox->value()
        , mUi->statisticPeriodDaysSpinBox->value()
        , mUi->notificationEventTypesSpinBox->value()
        , mUi->notificationEventLevelSpinBox->value()
        , mUi->notificationMethodEdit->text().toStdString()
        , mUi->notificationStartTimeEdit->text().toStdString()
        , mUi->notificationEndTimeEdit->text().toStdString()
        , mUi->notificationPhoneEdit->text().toStdString()
        , mUi->notificationEmailEdit->text().toStdString()
        , mUi->notificationSyserrEmailEdit->text().toStdString()
        , mUi->notificationSmsLoginEdit->text().toStdString()
        , mUi->notificationSmsPasswordEdit->text().toStdString()
        , mUi->notificationSmtpAddressEdit->text().toStdString()
        , mUi->notificationSmtpLoginEdit->text().toStdString()
        , mUi->notificationSmtpPasswordEdit->text().toStdString()
    );
    return result;
}

void CommonPipelineParametersControlWidget::setParameters(const CommonPipelineParameters &input)
{
    // Block signals to send them all at once
    bool wasBlocked = blockSignals(true);
    mUi->pipelineNameEdit->setText(input.pipelineName().c_str());
    mUi->cameraNameEdit->setText(input.cameraName().c_str());
    mUi->serverAddressEdit->setText(input.serverAddress().c_str());
    mUi->fpsSpinBox->setValue(input.fps());
    mUi->globalScaleSpinBox->setValue(input.globalScale());
    mUi->inputStreamUrlEdit->setText(input.inputStreamUrl().c_str());
    mUi->outputUrlEdit->setText(input.outputUrl().c_str());
    mUi->sourceOutputUrlEdit->setText(input.sourceOutputUrl().c_str());
    mUi->scaledOutputUrlEdit->setText(input.scaledOutputUrl().c_str());
    mUi->databasePathEdit->setText(input.databasePath().c_str());
    mUi->archivePathEdit->setText(input.archivePath().c_str());
    mUi->outputStreamBitrateSpinBox->setValue(input.outputStreamBitrate());
    mUi->processingIntervalSecSpinBox->setValue(input.processingIntervalSec());
    mUi->statisticIntervalSecSpinBox->setValue(input.statisticIntervalSec());
    mUi->statisticPeriodDaysSpinBox->setValue(input.statisticPeriodDays());
    mUi->notificationEventTypesSpinBox->setValue(input.notificationEventTypes());
    mUi->notificationEventLevelSpinBox->setValue(input.notificationEventLevel());
    mUi->notificationMethodEdit->setText(input.notificationMethod().c_str());
    mUi->notificationStartTimeEdit->setText(input.notificationStartTime().c_str());
    mUi->notificationEndTimeEdit->setText(input.notificationEndTime().c_str());
    mUi->notificationPhoneEdit->setText(input.notificationPhone().c_str());
    mUi->notificationEmailEdit->setText(input.notificationEmail().c_str());
    mUi->notificationSyserrEmailEdit->setText(input.notificationSyserrEmail().c_str());
    mUi->notificationSmsLoginEdit->setText(input.notificationSmsLogin().c_str());
    mUi->notificationSmsPasswordEdit->setText(input.notificationSmsPassword().c_str());
    mUi->notificationSmtpAddressEdit->setText(input.notificationSmtpAddress().c_str());
    mUi->notificationSmtpLoginEdit->setText(input.notificationSmtpLogin().c_str());
    mUi->notificationSmtpPasswordEdit->setText(input.notificationSmtpPassword().c_str());
    blockSignals(wasBlocked);
    emit paramsChanged();
}

void CommonPipelineParametersControlWidget::setParametersVirtual(void *input)
{
    // Modify widget parameters from outside
    CommonPipelineParameters *inputCasted = static_cast<CommonPipelineParameters *>(input);
    setParameters(*inputCasted);
}
