#ifndef EVENT_PROCESSING_PARAMS_H_
#define EVENT_PROCESSING_PARAMS_H_
/**
 * \file eventProcessingParams.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Event Processing Params 
 * Event Processing Params 
 **/
class EventProcessingParams : public BaseReflection<EventProcessingParams>
{
public:
    enum FieldId {
        MINIMAL_EVENT_DURATION_X_ID,
        MAXIMAL_EVENT_DURATION_Y_ID,
        IDLE_EVENT_DURATION_Z_ID,
        IGNORE_INTERVAL_W_ID,
        EVENT_PROCESSING_PARAMS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Minimal Event Duration X 
     * Minimal Event Duration X 
     */
    int mMinimalEventDurationX;

    /** 
     * \brief Maximal Event Duration Y 
     * Maximal Event Duration Y 
     */
    int mMaximalEventDurationY;

    /** 
     * \brief Idle Event Duration Z 
     * Idle Event Duration Z 
     */
    int mIdleEventDurationZ;

    /** 
     * \brief Ignore Interval W 
     * Ignore Interval W 
     */
    int mIgnoreIntervalW;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    int minimalEventDurationX() const
    {
        return mMinimalEventDurationX;
    }

    int maximalEventDurationY() const
    {
        return mMaximalEventDurationY;
    }

    int idleEventDurationZ() const
    {
        return mIdleEventDurationZ;
    }

    int ignoreIntervalW() const
    {
        return mIgnoreIntervalW;
    }

    /* Section with setters */
    void setMinimalEventDurationX(int minimalEventDurationX)
    {
        mMinimalEventDurationX = minimalEventDurationX;
    }

    void setMaximalEventDurationY(int maximalEventDurationY)
    {
        mMaximalEventDurationY = maximalEventDurationY;
    }

    void setIdleEventDurationZ(int idleEventDurationZ)
    {
        mIdleEventDurationZ = idleEventDurationZ;
    }

    void setIgnoreIntervalW(int ignoreIntervalW)
    {
        mIgnoreIntervalW = ignoreIntervalW;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mMinimalEventDurationX,     static_cast<const IntField *>     (fields()[MINIMAL_EVENT_DURATION_X_ID]));
        visitor.visit(mMaximalEventDurationY,     static_cast<const IntField *>     (fields()[MAXIMAL_EVENT_DURATION_Y_ID]));
        visitor.visit(mIdleEventDurationZ,        static_cast<const IntField *>     (fields()[IDLE_EVENT_DURATION_Z_ID]));
        visitor.visit(mIgnoreIntervalW,           static_cast<const IntField *>     (fields()[IGNORE_INTERVAL_W_ID]));
    }

    EventProcessingParams()
    {
        DefaultSetter setter;
        accept(setter);
    }

    EventProcessingParams(
          int minimalEventDurationX
        , int maximalEventDurationY
        , int idleEventDurationZ
        , int ignoreIntervalW
    )
    {
        mMinimalEventDurationX = minimalEventDurationX;
        mMaximalEventDurationY = maximalEventDurationY;
        mIdleEventDurationZ = idleEventDurationZ;
        mIgnoreIntervalW = ignoreIntervalW;
    }

    friend ostream& operator << (ostream &out, EventProcessingParams &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //EVENT_PROCESSING_PARAMS_H_
