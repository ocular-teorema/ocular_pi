/**
 * \file commonPipelineParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "commonPipelineParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<CommonPipelineParameters>::reflection = Reflection();
template<>
int BaseReflection<CommonPipelineParameters>::dummy = CommonPipelineParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int CommonPipelineParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Common Pipeline Parameters",
        "Common Pipeline Parameters",
        ""
    );
     

    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::PIPELINE_NAME_ID,
          offsetof(CommonPipelineParameters, mPipelineName),
          "cam",
          "Pipeline Name",
          "Pipeline Name",
          "Pipeline Name"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::CAMERA_NAME_ID,
          offsetof(CommonPipelineParameters, mCameraName),
          "Camera",
          "Camera name",
          "Camera name",
          "Camera name"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::SERVER_ADDRESS_ID,
          offsetof(CommonPipelineParameters, mServerAddress),
          "0.0.0.0",
          "Server address",
          "Server address",
          "Server address"
        )
    );
    fields().push_back(
        new IntField
        (
          CommonPipelineParameters::FPS_ID,
          offsetof(CommonPipelineParameters, mFps),
          10,
          "fps",
          "fps",
          "fps"
        )
    );
    fields().push_back(
        new DoubleField
        (
          CommonPipelineParameters::GLOBAL_SCALE_ID,
          offsetof(CommonPipelineParameters, mGlobalScale),
          0.5,
          "Global Scale",
          "Global Scale",
          "Global Scale"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::INPUT_STREAM_URL_ID,
          offsetof(CommonPipelineParameters, mInputStreamUrl),
          "0",
          "Input Stream Url",
          "Input Stream Url",
          "Input Stream Url"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::OUTPUT_URL_ID,
          offsetof(CommonPipelineParameters, mOutputUrl),
          "",
          "Output Url",
          "Output Url",
          "Output Url"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::SOURCE_OUTPUT_URL_ID,
          offsetof(CommonPipelineParameters, mSourceOutputUrl),
          "",
          "Source Output Url",
          "Source Output Url",
          "Source Output Url"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::SCALED_OUTPUT_URL_ID,
          offsetof(CommonPipelineParameters, mScaledOutputUrl),
          "",
          "Scaled Output Url",
          "Scaled Output Url",
          "Scaled Output Url"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::DATABASE_PATH_ID,
          offsetof(CommonPipelineParameters, mDatabasePath),
          "0",
          "Database Path",
          "Database Path",
          "Database Path"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::ARCHIVE_PATH_ID,
          offsetof(CommonPipelineParameters, mArchivePath),
          "0",
          "Archive Path",
          "Archive Path",
          "Archive Path"
        )
    );
    fields().push_back(
        new IntField
        (
          CommonPipelineParameters::OUTPUT_STREAM_BITRATE_ID,
          offsetof(CommonPipelineParameters, mOutputStreamBitrate),
          32,
          "Output Stream Bitrate",
          "Output Stream Bitrate",
          "Output Stream Bitrate"
        )
    );
    fields().push_back(
        new IntField
        (
          CommonPipelineParameters::PROCESSING_INTERVAL_SEC_ID,
          offsetof(CommonPipelineParameters, mProcessingIntervalSec),
          600,
          "Processing Interval Sec",
          "Processing Interval Sec",
          "Processing Interval Sec"
        )
    );
    fields().push_back(
        new IntField
        (
          CommonPipelineParameters::STATISTICINTERVALSEC_ID,
          offsetof(CommonPipelineParameters, mStatisticIntervalSec),
          600,
          "statisticIntervalSec",
          "statisticIntervalSec",
          "statisticIntervalSec"
        )
    );
    fields().push_back(
        new IntField
        (
          CommonPipelineParameters::STATISTICPERIODDAYS_ID,
          offsetof(CommonPipelineParameters, mStatisticPeriodDays),
          14,
          "statisticPeriodDays",
          "statisticPeriodDays",
          "statisticPeriodDays"
        )
    );
    fields().push_back(
        new IntField
        (
          CommonPipelineParameters::NOTIFICATION_EVENT_TYPES_ID,
          offsetof(CommonPipelineParameters, mNotificationEventTypes),
          2,
          "Notification event types",
          "Notification event types",
          "Notification event types"
        )
    );
    fields().push_back(
        new IntField
        (
          CommonPipelineParameters::NOTIFICATION_EVENT_LEVEL_ID,
          offsetof(CommonPipelineParameters, mNotificationEventLevel),
          80,
          "Notification event level",
          "Notification event level",
          "Notification event level"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_METHOD_ID,
          offsetof(CommonPipelineParameters, mNotificationMethod),
          "",
          "Notification method",
          "Notification method",
          "Notification method"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_START_TIME_ID,
          offsetof(CommonPipelineParameters, mNotificationStartTime),
          "00:00:00",
          "Notification start time",
          "Notification start time",
          "Notification start time"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_END_TIME_ID,
          offsetof(CommonPipelineParameters, mNotificationEndTime),
          "23:59:59",
          "Notification end time",
          "Notification end time",
          "Notification end time"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_PHONE_ID,
          offsetof(CommonPipelineParameters, mNotificationPhone),
          "",
          "Notification phone",
          "Notification phone",
          "Notification phone"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_EMAIL_ID,
          offsetof(CommonPipelineParameters, mNotificationEmail),
          "",
          "Notification email",
          "Notification email",
          "Notification email"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_SYSERR_EMAIL_ID,
          offsetof(CommonPipelineParameters, mNotificationSyserrEmail),
          "",
          "Notification syserr email",
          "Notification syserr email",
          "Notification syserr email"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_SMS_LOGIN_ID,
          offsetof(CommonPipelineParameters, mNotificationSmsLogin),
          "",
          "Notification sms login",
          "Notification sms login",
          "Notification sms login"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_SMS_PASSWORD_ID,
          offsetof(CommonPipelineParameters, mNotificationSmsPassword),
          "",
          "Notification sms password",
          "Notification sms password",
          "Notification sms password"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_SMTP_ADDRESS_ID,
          offsetof(CommonPipelineParameters, mNotificationSmtpAddress),
          "",
          "Notification smtp address",
          "Notification smtp address",
          "Notification smtp address"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_SMTP_LOGIN_ID,
          offsetof(CommonPipelineParameters, mNotificationSmtpLogin),
          "",
          "Notification smtp login",
          "Notification smtp login",
          "Notification smtp login"
        )
    );
    fields().push_back(
        new StringField
        (
          CommonPipelineParameters::NOTIFICATION_SMTP_PASSWORD_ID,
          offsetof(CommonPipelineParameters, mNotificationSmtpPassword),
          "",
          "Notification smtp password",
          "Notification smtp password",
          "Notification smtp password"
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


