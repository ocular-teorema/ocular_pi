/**
 * \file eventProcessingParams.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "eventProcessingParams.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<EventProcessingParams>::reflection = Reflection();
template<>
int BaseReflection<EventProcessingParams>::dummy = EventProcessingParams::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int EventProcessingParams::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Event Processing Params",
        "Event Processing Params",
        ""
    );
     

    fields().push_back(
        new IntField
        (
          EventProcessingParams::MINIMAL_EVENT_DURATION_X_ID,
          offsetof(EventProcessingParams, mMinimalEventDurationX),
          1000,
          "Minimal Event Duration X",
          "Minimal Event Duration X",
          "Minimal Event Duration X",
          true,
         1,
         3600000
        )
    );
    fields().push_back(
        new IntField
        (
          EventProcessingParams::MAXIMAL_EVENT_DURATION_Y_ID,
          offsetof(EventProcessingParams, mMaximalEventDurationY),
          60000,
          "Maximal Event Duration Y",
          "Maximal Event Duration Y",
          "Maximal Event Duration Y",
          true,
         1,
         3600000
        )
    );
    fields().push_back(
        new IntField
        (
          EventProcessingParams::IDLE_EVENT_DURATION_Z_ID,
          offsetof(EventProcessingParams, mIdleEventDurationZ),
          5000,
          "Idle Event Duration Z",
          "Idle Event Duration Z",
          "Idle Event Duration Z",
          true,
         1,
         3600000
        )
    );
    fields().push_back(
        new IntField
        (
          EventProcessingParams::IGNORE_INTERVAL_W_ID,
          offsetof(EventProcessingParams, mIgnoreIntervalW),
          12000,
          "Ignore Interval W",
          "Ignore Interval W",
          "Ignore Interval W",
          true,
         1,
         36000000
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


