#ifndef DECISION_PARAMS_H_
#define DECISION_PARAMS_H_
/**
 * \file decisionParams.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Decision Params 
 * Decision Params 
 **/
class DecisionParams : public BaseReflection<DecisionParams>
{
public:
    enum FieldId {
        TOTAL_THRESHOLD_ID,
        VALID_MOTION_BIN_HEIGHT_ID,
        DECISION_PARAMS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Total Threshold 
     * Total Threshold 
     */
    double mTotalThreshold;

    /** 
     * \brief Valid motion bin height 
     * Valid motion bin height 
     */
    int mValidMotionBinHeight;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double totalThreshold() const
    {
        return mTotalThreshold;
    }

    int validMotionBinHeight() const
    {
        return mValidMotionBinHeight;
    }

    /* Section with setters */
    void setTotalThreshold(double totalThreshold)
    {
        mTotalThreshold = totalThreshold;
    }

    void setValidMotionBinHeight(int validMotionBinHeight)
    {
        mValidMotionBinHeight = validMotionBinHeight;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mTotalThreshold,            static_cast<const DoubleField *>  (fields()[TOTAL_THRESHOLD_ID]));
        visitor.visit(mValidMotionBinHeight,      static_cast<const IntField *>     (fields()[VALID_MOTION_BIN_HEIGHT_ID]));
    }

    DecisionParams()
    {
        DefaultSetter setter;
        accept(setter);
    }

    DecisionParams(
          double totalThreshold
        , int validMotionBinHeight
    )
    {
        mTotalThreshold = totalThreshold;
        mValidMotionBinHeight = validMotionBinHeight;
    }

    friend ostream& operator << (ostream &out, DecisionParams &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //DECISION_PARAMS_H_
