#ifndef COMMON_PIPELINE_PARAMETERS_H_
#define COMMON_PIPELINE_PARAMETERS_H_
/**
 * \file commonPipelineParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Common Pipeline Parameters 
 * Common Pipeline Parameters 
 **/
class CommonPipelineParameters : public BaseReflection<CommonPipelineParameters>
{
public:
    enum FieldId {
        PIPELINE_NAME_ID,
        CAMERA_NAME_ID,
        SERVER_ADDRESS_ID,
        FPS_ID,
        GLOBAL_SCALE_ID,
        INPUT_STREAM_URL_ID,
        OUTPUT_URL_ID,
        SOURCE_OUTPUT_URL_ID,
        SCALED_OUTPUT_URL_ID,
        DATABASE_PATH_ID,
        ARCHIVE_PATH_ID,
        OUTPUT_STREAM_BITRATE_ID,
        PROCESSING_INTERVAL_SEC_ID,
        STATISTICINTERVALSEC_ID,
        STATISTICPERIODDAYS_ID,
        NOTIFICATION_EVENT_TYPES_ID,
        NOTIFICATION_EVENT_LEVEL_ID,
        NOTIFICATION_METHOD_ID,
        NOTIFICATION_START_TIME_ID,
        NOTIFICATION_END_TIME_ID,
        NOTIFICATION_PHONE_ID,
        NOTIFICATION_EMAIL_ID,
        NOTIFICATION_SYSERR_EMAIL_ID,
        NOTIFICATION_SMS_LOGIN_ID,
        NOTIFICATION_SMS_PASSWORD_ID,
        NOTIFICATION_SMTP_ADDRESS_ID,
        NOTIFICATION_SMTP_LOGIN_ID,
        NOTIFICATION_SMTP_PASSWORD_ID,
        COMMON_PIPELINE_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Pipeline Name 
     * Pipeline Name 
     */
    std::string mPipelineName;

    /** 
     * \brief Camera name 
     * Camera name 
     */
    std::string mCameraName;

    /** 
     * \brief Server address 
     * Server address 
     */
    std::string mServerAddress;

    /** 
     * \brief fps 
     * fps 
     */
    int mFps;

    /** 
     * \brief Global Scale 
     * Global Scale 
     */
    double mGlobalScale;

    /** 
     * \brief Input Stream Url 
     * Input Stream Url 
     */
    std::string mInputStreamUrl;

    /** 
     * \brief Output Url 
     * Output Url 
     */
    std::string mOutputUrl;

    /** 
     * \brief Source Output Url 
     * Source Output Url 
     */
    std::string mSourceOutputUrl;

    /** 
     * \brief Scaled Output Url 
     * Scaled Output Url 
     */
    std::string mScaledOutputUrl;

    /** 
     * \brief Database Path 
     * Database Path 
     */
    std::string mDatabasePath;

    /** 
     * \brief Archive Path 
     * Archive Path 
     */
    std::string mArchivePath;

    /** 
     * \brief Output Stream Bitrate 
     * Output Stream Bitrate 
     */
    int mOutputStreamBitrate;

    /** 
     * \brief Processing Interval Sec 
     * Processing Interval Sec 
     */
    int mProcessingIntervalSec;

    /** 
     * \brief statisticIntervalSec 
     * statisticIntervalSec 
     */
    int mStatisticIntervalSec;

    /** 
     * \brief statisticPeriodDays 
     * statisticPeriodDays 
     */
    int mStatisticPeriodDays;

    /** 
     * \brief Notification event types 
     * Notification event types 
     */
    int mNotificationEventTypes;

    /** 
     * \brief Notification event level 
     * Notification event level 
     */
    int mNotificationEventLevel;

    /** 
     * \brief Notification method 
     * Notification method 
     */
    std::string mNotificationMethod;

    /** 
     * \brief Notification start time 
     * Notification start time 
     */
    std::string mNotificationStartTime;

    /** 
     * \brief Notification end time 
     * Notification end time 
     */
    std::string mNotificationEndTime;

    /** 
     * \brief Notification phone 
     * Notification phone 
     */
    std::string mNotificationPhone;

    /** 
     * \brief Notification email 
     * Notification email 
     */
    std::string mNotificationEmail;

    /** 
     * \brief Notification syserr email 
     * Notification syserr email 
     */
    std::string mNotificationSyserrEmail;

    /** 
     * \brief Notification sms login 
     * Notification sms login 
     */
    std::string mNotificationSmsLogin;

    /** 
     * \brief Notification sms password 
     * Notification sms password 
     */
    std::string mNotificationSmsPassword;

    /** 
     * \brief Notification smtp address 
     * Notification smtp address 
     */
    std::string mNotificationSmtpAddress;

    /** 
     * \brief Notification smtp login 
     * Notification smtp login 
     */
    std::string mNotificationSmtpLogin;

    /** 
     * \brief Notification smtp password 
     * Notification smtp password 
     */
    std::string mNotificationSmtpPassword;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    std::string pipelineName() const
    {
        return mPipelineName;
    }

    std::string cameraName() const
    {
        return mCameraName;
    }

    std::string serverAddress() const
    {
        return mServerAddress;
    }

    int fps() const
    {
        return mFps;
    }

    double globalScale() const
    {
        return mGlobalScale;
    }

    std::string inputStreamUrl() const
    {
        return mInputStreamUrl;
    }

    std::string outputUrl() const
    {
        return mOutputUrl;
    }

    std::string sourceOutputUrl() const
    {
        return mSourceOutputUrl;
    }

    std::string scaledOutputUrl() const
    {
        return mScaledOutputUrl;
    }

    std::string databasePath() const
    {
        return mDatabasePath;
    }

    std::string archivePath() const
    {
        return mArchivePath;
    }

    int outputStreamBitrate() const
    {
        return mOutputStreamBitrate;
    }

    int processingIntervalSec() const
    {
        return mProcessingIntervalSec;
    }

    int statisticIntervalSec() const
    {
        return mStatisticIntervalSec;
    }

    int statisticPeriodDays() const
    {
        return mStatisticPeriodDays;
    }

    int notificationEventTypes() const
    {
        return mNotificationEventTypes;
    }

    int notificationEventLevel() const
    {
        return mNotificationEventLevel;
    }

    std::string notificationMethod() const
    {
        return mNotificationMethod;
    }

    std::string notificationStartTime() const
    {
        return mNotificationStartTime;
    }

    std::string notificationEndTime() const
    {
        return mNotificationEndTime;
    }

    std::string notificationPhone() const
    {
        return mNotificationPhone;
    }

    std::string notificationEmail() const
    {
        return mNotificationEmail;
    }

    std::string notificationSyserrEmail() const
    {
        return mNotificationSyserrEmail;
    }

    std::string notificationSmsLogin() const
    {
        return mNotificationSmsLogin;
    }

    std::string notificationSmsPassword() const
    {
        return mNotificationSmsPassword;
    }

    std::string notificationSmtpAddress() const
    {
        return mNotificationSmtpAddress;
    }

    std::string notificationSmtpLogin() const
    {
        return mNotificationSmtpLogin;
    }

    std::string notificationSmtpPassword() const
    {
        return mNotificationSmtpPassword;
    }

    /* Section with setters */
    void setPipelineName(std::string pipelineName)
    {
        mPipelineName = pipelineName;
    }

    void setCameraName(std::string cameraName)
    {
        mCameraName = cameraName;
    }

    void setServerAddress(std::string serverAddress)
    {
        mServerAddress = serverAddress;
    }

    void setFps(int fps)
    {
        mFps = fps;
    }

    void setGlobalScale(double globalScale)
    {
        mGlobalScale = globalScale;
    }

    void setInputStreamUrl(std::string inputStreamUrl)
    {
        mInputStreamUrl = inputStreamUrl;
    }

    void setOutputUrl(std::string outputUrl)
    {
        mOutputUrl = outputUrl;
    }

    void setSourceOutputUrl(std::string sourceOutputUrl)
    {
        mSourceOutputUrl = sourceOutputUrl;
    }

    void setScaledOutputUrl(std::string scaledOutputUrl)
    {
        mScaledOutputUrl = scaledOutputUrl;
    }

    void setDatabasePath(std::string databasePath)
    {
        mDatabasePath = databasePath;
    }

    void setArchivePath(std::string archivePath)
    {
        mArchivePath = archivePath;
    }

    void setOutputStreamBitrate(int outputStreamBitrate)
    {
        mOutputStreamBitrate = outputStreamBitrate;
    }

    void setProcessingIntervalSec(int processingIntervalSec)
    {
        mProcessingIntervalSec = processingIntervalSec;
    }

    void setStatisticIntervalSec(int statisticIntervalSec)
    {
        mStatisticIntervalSec = statisticIntervalSec;
    }

    void setStatisticPeriodDays(int statisticPeriodDays)
    {
        mStatisticPeriodDays = statisticPeriodDays;
    }

    void setNotificationEventTypes(int notificationEventTypes)
    {
        mNotificationEventTypes = notificationEventTypes;
    }

    void setNotificationEventLevel(int notificationEventLevel)
    {
        mNotificationEventLevel = notificationEventLevel;
    }

    void setNotificationMethod(std::string notificationMethod)
    {
        mNotificationMethod = notificationMethod;
    }

    void setNotificationStartTime(std::string notificationStartTime)
    {
        mNotificationStartTime = notificationStartTime;
    }

    void setNotificationEndTime(std::string notificationEndTime)
    {
        mNotificationEndTime = notificationEndTime;
    }

    void setNotificationPhone(std::string notificationPhone)
    {
        mNotificationPhone = notificationPhone;
    }

    void setNotificationEmail(std::string notificationEmail)
    {
        mNotificationEmail = notificationEmail;
    }

    void setNotificationSyserrEmail(std::string notificationSyserrEmail)
    {
        mNotificationSyserrEmail = notificationSyserrEmail;
    }

    void setNotificationSmsLogin(std::string notificationSmsLogin)
    {
        mNotificationSmsLogin = notificationSmsLogin;
    }

    void setNotificationSmsPassword(std::string notificationSmsPassword)
    {
        mNotificationSmsPassword = notificationSmsPassword;
    }

    void setNotificationSmtpAddress(std::string notificationSmtpAddress)
    {
        mNotificationSmtpAddress = notificationSmtpAddress;
    }

    void setNotificationSmtpLogin(std::string notificationSmtpLogin)
    {
        mNotificationSmtpLogin = notificationSmtpLogin;
    }

    void setNotificationSmtpPassword(std::string notificationSmtpPassword)
    {
        mNotificationSmtpPassword = notificationSmtpPassword;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mPipelineName,              static_cast<const StringField *>  (fields()[PIPELINE_NAME_ID]));
        visitor.visit(mCameraName,                static_cast<const StringField *>  (fields()[CAMERA_NAME_ID]));
        visitor.visit(mServerAddress,             static_cast<const StringField *>  (fields()[SERVER_ADDRESS_ID]));
        visitor.visit(mFps,                       static_cast<const IntField *>     (fields()[FPS_ID]));
        visitor.visit(mGlobalScale,               static_cast<const DoubleField *>  (fields()[GLOBAL_SCALE_ID]));
        visitor.visit(mInputStreamUrl,            static_cast<const StringField *>  (fields()[INPUT_STREAM_URL_ID]));
        visitor.visit(mOutputUrl,                 static_cast<const StringField *>  (fields()[OUTPUT_URL_ID]));
        visitor.visit(mSourceOutputUrl,           static_cast<const StringField *>  (fields()[SOURCE_OUTPUT_URL_ID]));
        visitor.visit(mScaledOutputUrl,           static_cast<const StringField *>  (fields()[SCALED_OUTPUT_URL_ID]));
        visitor.visit(mDatabasePath,              static_cast<const StringField *>  (fields()[DATABASE_PATH_ID]));
        visitor.visit(mArchivePath,               static_cast<const StringField *>  (fields()[ARCHIVE_PATH_ID]));
        visitor.visit(mOutputStreamBitrate,       static_cast<const IntField *>     (fields()[OUTPUT_STREAM_BITRATE_ID]));
        visitor.visit(mProcessingIntervalSec,     static_cast<const IntField *>     (fields()[PROCESSING_INTERVAL_SEC_ID]));
        visitor.visit(mStatisticIntervalSec,      static_cast<const IntField *>     (fields()[STATISTICINTERVALSEC_ID]));
        visitor.visit(mStatisticPeriodDays,       static_cast<const IntField *>     (fields()[STATISTICPERIODDAYS_ID]));
        visitor.visit(mNotificationEventTypes,    static_cast<const IntField *>     (fields()[NOTIFICATION_EVENT_TYPES_ID]));
        visitor.visit(mNotificationEventLevel,    static_cast<const IntField *>     (fields()[NOTIFICATION_EVENT_LEVEL_ID]));
        visitor.visit(mNotificationMethod,        static_cast<const StringField *>  (fields()[NOTIFICATION_METHOD_ID]));
        visitor.visit(mNotificationStartTime,     static_cast<const StringField *>  (fields()[NOTIFICATION_START_TIME_ID]));
        visitor.visit(mNotificationEndTime,       static_cast<const StringField *>  (fields()[NOTIFICATION_END_TIME_ID]));
        visitor.visit(mNotificationPhone,         static_cast<const StringField *>  (fields()[NOTIFICATION_PHONE_ID]));
        visitor.visit(mNotificationEmail,         static_cast<const StringField *>  (fields()[NOTIFICATION_EMAIL_ID]));
        visitor.visit(mNotificationSyserrEmail,   static_cast<const StringField *>  (fields()[NOTIFICATION_SYSERR_EMAIL_ID]));
        visitor.visit(mNotificationSmsLogin,      static_cast<const StringField *>  (fields()[NOTIFICATION_SMS_LOGIN_ID]));
        visitor.visit(mNotificationSmsPassword,   static_cast<const StringField *>  (fields()[NOTIFICATION_SMS_PASSWORD_ID]));
        visitor.visit(mNotificationSmtpAddress,   static_cast<const StringField *>  (fields()[NOTIFICATION_SMTP_ADDRESS_ID]));
        visitor.visit(mNotificationSmtpLogin,     static_cast<const StringField *>  (fields()[NOTIFICATION_SMTP_LOGIN_ID]));
        visitor.visit(mNotificationSmtpPassword,  static_cast<const StringField *>  (fields()[NOTIFICATION_SMTP_PASSWORD_ID]));
    }

    CommonPipelineParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    CommonPipelineParameters(
          std::string pipelineName
        , std::string cameraName
        , std::string serverAddress
        , int fps
        , double globalScale
        , std::string inputStreamUrl
        , std::string outputUrl
        , std::string sourceOutputUrl
        , std::string scaledOutputUrl
        , std::string databasePath
        , std::string archivePath
        , int outputStreamBitrate
        , int processingIntervalSec
        , int statisticIntervalSec
        , int statisticPeriodDays
        , int notificationEventTypes
        , int notificationEventLevel
        , std::string notificationMethod
        , std::string notificationStartTime
        , std::string notificationEndTime
        , std::string notificationPhone
        , std::string notificationEmail
        , std::string notificationSyserrEmail
        , std::string notificationSmsLogin
        , std::string notificationSmsPassword
        , std::string notificationSmtpAddress
        , std::string notificationSmtpLogin
        , std::string notificationSmtpPassword
    )
    {
        mPipelineName = pipelineName;
        mCameraName = cameraName;
        mServerAddress = serverAddress;
        mFps = fps;
        mGlobalScale = globalScale;
        mInputStreamUrl = inputStreamUrl;
        mOutputUrl = outputUrl;
        mSourceOutputUrl = sourceOutputUrl;
        mScaledOutputUrl = scaledOutputUrl;
        mDatabasePath = databasePath;
        mArchivePath = archivePath;
        mOutputStreamBitrate = outputStreamBitrate;
        mProcessingIntervalSec = processingIntervalSec;
        mStatisticIntervalSec = statisticIntervalSec;
        mStatisticPeriodDays = statisticPeriodDays;
        mNotificationEventTypes = notificationEventTypes;
        mNotificationEventLevel = notificationEventLevel;
        mNotificationMethod = notificationMethod;
        mNotificationStartTime = notificationStartTime;
        mNotificationEndTime = notificationEndTime;
        mNotificationPhone = notificationPhone;
        mNotificationEmail = notificationEmail;
        mNotificationSyserrEmail = notificationSyserrEmail;
        mNotificationSmsLogin = notificationSmsLogin;
        mNotificationSmsPassword = notificationSmsPassword;
        mNotificationSmtpAddress = notificationSmtpAddress;
        mNotificationSmtpLogin = notificationSmtpLogin;
        mNotificationSmtpPassword = notificationSmtpPassword;
    }

    friend ostream& operator << (ostream &out, CommonPipelineParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //COMMON_PIPELINE_PARAMETERS_H_
