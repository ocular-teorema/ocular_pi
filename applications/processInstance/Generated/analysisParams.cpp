/**
 * \file analysisParams.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "analysisParams.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<AnalysisParams>::reflection = Reflection();
template<>
int BaseReflection<AnalysisParams>::dummy = AnalysisParams::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int AnalysisParams::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Analysis Params",
        "Analysis Params",
        ""
    );
     

    fields().push_back(
        new DoubleField
        (
          AnalysisParams::DOWNSCALE_COEFF_ID,
          offsetof(AnalysisParams, mDownscaleCoeff),
          0.25,
          "Downscale Coeff",
          "Downscale Coeff",
          "Downscale Coeff",
          true,
         0.0001,
         10000
        )
    );
    fields().push_back(
        new DoubleField
        (
          AnalysisParams::MOTION_THRESHOLD_ID,
          offsetof(AnalysisParams, mMotionThreshold),
          0.2,
          "Motion Threshold",
          "Motion Threshold",
          "Motion Threshold",
          true,
         0.0001,
         10000
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::DIFF_THRESHOLD_ID,
          offsetof(AnalysisParams, mDiffThreshold),
          20,
          "Diff Threshold",
          "Diff Threshold",
          "Diff Threshold"
        )
    );
    fields().push_back(
        new BoolField
        (
          AnalysisParams::PRODUCE_DEBUG_ID,
          offsetof(AnalysisParams, mProduceDebug),
          false,
          "Produce Debug",
          "Produce Debug",
          "Produce Debug"
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::DEBUGIMAGEINDEX_ID,
          offsetof(AnalysisParams, mDebugImageIndex),
          0,
          "DebugImageIndex",
          "DebugImageIndex",
          "DebugImageIndex"
        )
    );
    fields().push_back(
        new BoolField
        (
          AnalysisParams::DIFFERENCE_BASED_ANALYSIS_ID,
          offsetof(AnalysisParams, mDifferenceBasedAnalysis),
          true,
          "Difference based analysis",
          "Difference based analysis",
          "Difference based analysis"
        )
    );
    fields().push_back(
        new BoolField
        (
          AnalysisParams::MOTION_BASED_ANALYSIS_ID,
          offsetof(AnalysisParams, mMotionBasedAnalysis),
          true,
          "Motion based analysis",
          "Motion based analysis",
          "Motion based analysis"
        )
    );
    fields().push_back(
        new DoubleField
        (
          AnalysisParams::TOTAL_THRESHOLD_ID,
          offsetof(AnalysisParams, mTotalThreshold),
          0.05,
          "Total Threshold",
          "Total Threshold",
          "Total Threshold",
          true,
         0.0001,
         100
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::VALID_MOTION_BIN_HEIGHT_ID,
          offsetof(AnalysisParams, mValidMotionBinHeight),
          8,
          "Valid motion bin height",
          "Valid motion bin height",
          "Valid motion bin height",
          true,
         2,
         99999
        )
    );
    fields().push_back(
        new BoolField
        (
          AnalysisParams::DEBUG_OBJECTS_ID,
          offsetof(AnalysisParams, mDebugObjects),
          false,
          "Debug objects",
          "Debug objects",
          "Debug objects"
        )
    );
    fields().push_back(
        new BoolField
        (
          AnalysisParams::EXPERIMENTAL_ID,
          offsetof(AnalysisParams, mExperimental),
          false,
          "Experimental",
          "Experimental",
          "Experimental"
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::MINIMUM_CLUSTER_ID,
          offsetof(AnalysisParams, mMinimumCluster),
          50,
          "Minimum Cluster",
          "Minimum Cluster",
          "Minimum Cluster",
          true,
         1,
         999999
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::DILATE_SIZE_ID,
          offsetof(AnalysisParams, mDilateSize),
          10,
          "Dilate Size",
          "Dilate Size",
          "Dilate Size",
          true,
         1,
         999999
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::BG_THRESHOLD_ID,
          offsetof(AnalysisParams, mBgThreshold),
          15,
          "Bg threshold",
          "Bg threshold",
          "Bg threshold",
          true,
         1,
         99999
        )
    );
    fields().push_back(
        new DoubleField
        (
          AnalysisParams::FG_THRESHOLD_ID,
          offsetof(AnalysisParams, mFgThreshold),
          40,
          "Fg Threshold",
          "Fg Threshold",
          "Fg Threshold",
          true,
         1,
         100
        )
    );
    fields().push_back(
        new BoolField
        (
          AnalysisParams::USE_VIRTUAL_DATE_ID,
          offsetof(AnalysisParams, mUseVirtualDate),
          false,
          "Use virtual date",
          "Use virtual date",
          "Use virtual date"
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::YEAR_ID,
          offsetof(AnalysisParams, mYear),
          2016,
          "Year",
          "Year",
          "Year",
          true,
         1970,
         99999
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::MONTH_ID,
          offsetof(AnalysisParams, mMonth),
          6,
          "Month",
          "Month",
          "Month",
          true,
         1,
         12
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::DAY_ID,
          offsetof(AnalysisParams, mDay),
          1,
          "Day",
          "Day",
          "Day",
          true,
         1,
         31
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::HOUR_ID,
          offsetof(AnalysisParams, mHour),
          12,
          "Hour",
          "Hour",
          "Hour",
          true,
         0,
         23
        )
    );
    fields().push_back(
        new IntField
        (
          AnalysisParams::MINUTE_ID,
          offsetof(AnalysisParams, mMinute),
          0,
          "Minute",
          "Minute",
          "Minute",
          true,
         0,
         59
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


