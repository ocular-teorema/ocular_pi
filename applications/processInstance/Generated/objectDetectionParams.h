#ifndef OBJECT_DETECTION_PARAMS_H_
#define OBJECT_DETECTION_PARAMS_H_
/**
 * \file objectDetectionParams.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Object Detection Params 
 * Object Detection Params 
 **/
class ObjectDetectionParams : public BaseReflection<ObjectDetectionParams>
{
public:
    enum FieldId {
        DEBUG_OBJECTS_ID,
        EXPERIMENTAL_ID,
        MINIMUM_CLUSTER_ID,
        DILATE_SIZE_ID,
        BG_THRESHOLD_ID,
        FG_THRESHOLD_ID,
        OBJECT_DETECTION_PARAMS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Debug objects 
     * Debug objects 
     */
    bool mDebugObjects;

    /** 
     * \brief Experimental 
     * Experimental 
     */
    bool mExperimental;

    /** 
     * \brief Minimum Cluster 
     * Minimum Cluster 
     */
    int mMinimumCluster;

    /** 
     * \brief Dilate Size 
     * Dilate Size 
     */
    int mDilateSize;

    /** 
     * \brief Bg threshold 
     * Bg threshold 
     */
    int mBgThreshold;

    /** 
     * \brief Fg Threshold 
     * Fg Threshold 
     */
    double mFgThreshold;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    bool debugObjects() const
    {
        return mDebugObjects;
    }

    bool experimental() const
    {
        return mExperimental;
    }

    int minimumCluster() const
    {
        return mMinimumCluster;
    }

    int dilateSize() const
    {
        return mDilateSize;
    }

    int bgThreshold() const
    {
        return mBgThreshold;
    }

    double fgThreshold() const
    {
        return mFgThreshold;
    }

    /* Section with setters */
    void setDebugObjects(bool debugObjects)
    {
        mDebugObjects = debugObjects;
    }

    void setExperimental(bool experimental)
    {
        mExperimental = experimental;
    }

    void setMinimumCluster(int minimumCluster)
    {
        mMinimumCluster = minimumCluster;
    }

    void setDilateSize(int dilateSize)
    {
        mDilateSize = dilateSize;
    }

    void setBgThreshold(int bgThreshold)
    {
        mBgThreshold = bgThreshold;
    }

    void setFgThreshold(double fgThreshold)
    {
        mFgThreshold = fgThreshold;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mDebugObjects,              static_cast<const BoolField *>    (fields()[DEBUG_OBJECTS_ID]));
        visitor.visit(mExperimental,              static_cast<const BoolField *>    (fields()[EXPERIMENTAL_ID]));
        visitor.visit(mMinimumCluster,            static_cast<const IntField *>     (fields()[MINIMUM_CLUSTER_ID]));
        visitor.visit(mDilateSize,                static_cast<const IntField *>     (fields()[DILATE_SIZE_ID]));
        visitor.visit(mBgThreshold,               static_cast<const IntField *>     (fields()[BG_THRESHOLD_ID]));
        visitor.visit(mFgThreshold,               static_cast<const DoubleField *>  (fields()[FG_THRESHOLD_ID]));
    }

    ObjectDetectionParams()
    {
        DefaultSetter setter;
        accept(setter);
    }

    ObjectDetectionParams(
          bool debugObjects
        , bool experimental
        , int minimumCluster
        , int dilateSize
        , int bgThreshold
        , double fgThreshold
    )
    {
        mDebugObjects = debugObjects;
        mExperimental = experimental;
        mMinimumCluster = minimumCluster;
        mDilateSize = dilateSize;
        mBgThreshold = bgThreshold;
        mFgThreshold = fgThreshold;
    }

    friend ostream& operator << (ostream &out, ObjectDetectionParams &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //OBJECT_DETECTION_PARAMS_H_
