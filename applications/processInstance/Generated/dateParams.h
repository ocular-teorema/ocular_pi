#ifndef DATE_PARAMS_H_
#define DATE_PARAMS_H_
/**
 * \file dateParams.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Date Params 
 * Date Params 
 **/
class DateParams : public BaseReflection<DateParams>
{
public:
    enum FieldId {
        USE_VIRTUAL_DATE_ID,
        YEAR_ID,
        MONTH_ID,
        DAY_ID,
        HOUR_ID,
        MINUTE_ID,
        DATE_PARAMS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Use virtual date 
     * Use virtual date 
     */
    bool mUseVirtualDate;

    /** 
     * \brief Year 
     * Year 
     */
    int mYear;

    /** 
     * \brief Month 
     * Month 
     */
    int mMonth;

    /** 
     * \brief Day 
     * Day 
     */
    int mDay;

    /** 
     * \brief Hour 
     * Hour 
     */
    int mHour;

    /** 
     * \brief Minute 
     * Minute 
     */
    int mMinute;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    bool useVirtualDate() const
    {
        return mUseVirtualDate;
    }

    int year() const
    {
        return mYear;
    }

    int month() const
    {
        return mMonth;
    }

    int day() const
    {
        return mDay;
    }

    int hour() const
    {
        return mHour;
    }

    int minute() const
    {
        return mMinute;
    }

    /* Section with setters */
    void setUseVirtualDate(bool useVirtualDate)
    {
        mUseVirtualDate = useVirtualDate;
    }

    void setYear(int year)
    {
        mYear = year;
    }

    void setMonth(int month)
    {
        mMonth = month;
    }

    void setDay(int day)
    {
        mDay = day;
    }

    void setHour(int hour)
    {
        mHour = hour;
    }

    void setMinute(int minute)
    {
        mMinute = minute;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mUseVirtualDate,            static_cast<const BoolField *>    (fields()[USE_VIRTUAL_DATE_ID]));
        visitor.visit(mYear,                      static_cast<const IntField *>     (fields()[YEAR_ID]));
        visitor.visit(mMonth,                     static_cast<const IntField *>     (fields()[MONTH_ID]));
        visitor.visit(mDay,                       static_cast<const IntField *>     (fields()[DAY_ID]));
        visitor.visit(mHour,                      static_cast<const IntField *>     (fields()[HOUR_ID]));
        visitor.visit(mMinute,                    static_cast<const IntField *>     (fields()[MINUTE_ID]));
    }

    DateParams()
    {
        DefaultSetter setter;
        accept(setter);
    }

    DateParams(
          bool useVirtualDate
        , int year
        , int month
        , int day
        , int hour
        , int minute
    )
    {
        mUseVirtualDate = useVirtualDate;
        mYear = year;
        mMonth = month;
        mDay = day;
        mHour = hour;
        mMinute = minute;
    }

    friend ostream& operator << (ostream &out, DateParams &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //DATE_PARAMS_H_
