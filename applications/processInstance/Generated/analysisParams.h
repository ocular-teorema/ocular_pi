#ifndef ANALYSIS_PARAMS_H_
#define ANALYSIS_PARAMS_H_
/**
 * \file analysisParams.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
#include "decisionParams.h"
#include "objectDetectionParams.h"
#include "dateParams.h"
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Analysis Params 
 * Analysis Params 
 **/
class AnalysisParams : public BaseReflection<AnalysisParams>
{
public:
    enum FieldId {
        DOWNSCALE_COEFF_ID,
        MOTION_THRESHOLD_ID,
        DIFF_THRESHOLD_ID,
        PRODUCE_DEBUG_ID,
        DEBUGIMAGEINDEX_ID,
        DIFFERENCE_BASED_ANALYSIS_ID,
        MOTION_BASED_ANALYSIS_ID,
        TOTAL_THRESHOLD_ID,
        VALID_MOTION_BIN_HEIGHT_ID,
        DEBUG_OBJECTS_ID,
        EXPERIMENTAL_ID,
        MINIMUM_CLUSTER_ID,
        DILATE_SIZE_ID,
        BG_THRESHOLD_ID,
        FG_THRESHOLD_ID,
        USE_VIRTUAL_DATE_ID,
        YEAR_ID,
        MONTH_ID,
        DAY_ID,
        HOUR_ID,
        MINUTE_ID,
        ANALYSIS_PARAMS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief Downscale Coeff 
     * Downscale Coeff 
     */
    double mDownscaleCoeff;

    /** 
     * \brief Motion Threshold 
     * Motion Threshold 
     */
    double mMotionThreshold;

    /** 
     * \brief Diff Threshold 
     * Diff Threshold 
     */
    int mDiffThreshold;

    /** 
     * \brief Produce Debug 
     * Produce Debug 
     */
    bool mProduceDebug;

    /** 
     * \brief DebugImageIndex 
     * DebugImageIndex 
     */
    int mDebugImageIndex;

    /** 
     * \brief Difference based analysis 
     * Difference based analysis 
     */
    bool mDifferenceBasedAnalysis;

    /** 
     * \brief Motion based analysis 
     * Motion based analysis 
     */
    bool mMotionBasedAnalysis;

    /** 
     * \brief Total Threshold 
     * Total Threshold 
     */
    double mTotalThreshold;

    /** 
     * \brief Valid motion bin height 
     * Valid motion bin height 
     */
    int mValidMotionBinHeight;

    /** 
     * \brief Debug objects 
     * Debug objects 
     */
    bool mDebugObjects;

    /** 
     * \brief Experimental 
     * Experimental 
     */
    bool mExperimental;

    /** 
     * \brief Minimum Cluster 
     * Minimum Cluster 
     */
    int mMinimumCluster;

    /** 
     * \brief Dilate Size 
     * Dilate Size 
     */
    int mDilateSize;

    /** 
     * \brief Bg threshold 
     * Bg threshold 
     */
    int mBgThreshold;

    /** 
     * \brief Fg Threshold 
     * Fg Threshold 
     */
    double mFgThreshold;

    /** 
     * \brief Use virtual date 
     * Use virtual date 
     */
    bool mUseVirtualDate;

    /** 
     * \brief Year 
     * Year 
     */
    int mYear;

    /** 
     * \brief Month 
     * Month 
     */
    int mMonth;

    /** 
     * \brief Day 
     * Day 
     */
    int mDay;

    /** 
     * \brief Hour 
     * Hour 
     */
    int mHour;

    /** 
     * \brief Minute 
     * Minute 
     */
    int mMinute;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double downscaleCoeff() const
    {
        return mDownscaleCoeff;
    }

    double motionThreshold() const
    {
        return mMotionThreshold;
    }

    int diffThreshold() const
    {
        return mDiffThreshold;
    }

    bool produceDebug() const
    {
        return mProduceDebug;
    }

    int debugImageIndex() const
    {
        return mDebugImageIndex;
    }

    bool differenceBasedAnalysis() const
    {
        return mDifferenceBasedAnalysis;
    }

    bool motionBasedAnalysis() const
    {
        return mMotionBasedAnalysis;
    }

    double totalThreshold() const
    {
        return mTotalThreshold;
    }

    int validMotionBinHeight() const
    {
        return mValidMotionBinHeight;
    }

    bool debugObjects() const
    {
        return mDebugObjects;
    }

    bool experimental() const
    {
        return mExperimental;
    }

    int minimumCluster() const
    {
        return mMinimumCluster;
    }

    int dilateSize() const
    {
        return mDilateSize;
    }

    int bgThreshold() const
    {
        return mBgThreshold;
    }

    double fgThreshold() const
    {
        return mFgThreshold;
    }

    bool useVirtualDate() const
    {
        return mUseVirtualDate;
    }

    int year() const
    {
        return mYear;
    }

    int month() const
    {
        return mMonth;
    }

    int day() const
    {
        return mDay;
    }

    int hour() const
    {
        return mHour;
    }

    int minute() const
    {
        return mMinute;
    }

    /* Section with setters */
    void setDownscaleCoeff(double downscaleCoeff)
    {
        mDownscaleCoeff = downscaleCoeff;
    }

    void setMotionThreshold(double motionThreshold)
    {
        mMotionThreshold = motionThreshold;
    }

    void setDiffThreshold(int diffThreshold)
    {
        mDiffThreshold = diffThreshold;
    }

    void setProduceDebug(bool produceDebug)
    {
        mProduceDebug = produceDebug;
    }

    void setDebugImageIndex(int debugImageIndex)
    {
        mDebugImageIndex = debugImageIndex;
    }

    void setDifferenceBasedAnalysis(bool differenceBasedAnalysis)
    {
        mDifferenceBasedAnalysis = differenceBasedAnalysis;
    }

    void setMotionBasedAnalysis(bool motionBasedAnalysis)
    {
        mMotionBasedAnalysis = motionBasedAnalysis;
    }

    void setTotalThreshold(double totalThreshold)
    {
        mTotalThreshold = totalThreshold;
    }

    void setValidMotionBinHeight(int validMotionBinHeight)
    {
        mValidMotionBinHeight = validMotionBinHeight;
    }

    void setDebugObjects(bool debugObjects)
    {
        mDebugObjects = debugObjects;
    }

    void setExperimental(bool experimental)
    {
        mExperimental = experimental;
    }

    void setMinimumCluster(int minimumCluster)
    {
        mMinimumCluster = minimumCluster;
    }

    void setDilateSize(int dilateSize)
    {
        mDilateSize = dilateSize;
    }

    void setBgThreshold(int bgThreshold)
    {
        mBgThreshold = bgThreshold;
    }

    void setFgThreshold(double fgThreshold)
    {
        mFgThreshold = fgThreshold;
    }

    void setUseVirtualDate(bool useVirtualDate)
    {
        mUseVirtualDate = useVirtualDate;
    }

    void setYear(int year)
    {
        mYear = year;
    }

    void setMonth(int month)
    {
        mMonth = month;
    }

    void setDay(int day)
    {
        mDay = day;
    }

    void setHour(int hour)
    {
        mHour = hour;
    }

    void setMinute(int minute)
    {
        mMinute = minute;
    }

    /* Section with embedded classes */
    /** 
     * \brief Des Params 
     * Des Params 
     */
    DecisionParams desParams() const
    {
        return DecisionParams(
             totalThreshold()
           , validMotionBinHeight()
        );
    }

    void setDesParams(DecisionParams const &desParams)
    {
        mTotalThreshold = desParams.totalThreshold();
        mValidMotionBinHeight = desParams.validMotionBinHeight();
    }

    /** 
     * \brief Detector Params 
     * Detector Params 
     */
    ObjectDetectionParams detectorParams() const
    {
        return ObjectDetectionParams(
             debugObjects()
           , experimental()
           , minimumCluster()
           , dilateSize()
           , bgThreshold()
           , fgThreshold()
        );
    }

    void setDetectorParams(ObjectDetectionParams const &detectorParams)
    {
        mDebugObjects  = detectorParams.debugObjects();
        mExperimental  = detectorParams.experimental();
        mMinimumCluster = detectorParams.minimumCluster();
        mDilateSize    = detectorParams.dilateSize();
        mBgThreshold   = detectorParams.bgThreshold();
        mFgThreshold   = detectorParams.fgThreshold();
    }

    /** 
     * \brief Date Params 
     * Date Params 
     */
    DateParams dateParams() const
    {
        return DateParams(
             useVirtualDate()
           , year()
           , month()
           , day()
           , hour()
           , minute()
        );
    }

    void setDateParams(DateParams const &dateParams)
    {
        mUseVirtualDate = dateParams.useVirtualDate();
        mYear          = dateParams.year();
        mMonth         = dateParams.month();
        mDay           = dateParams.day();
        mHour          = dateParams.hour();
        mMinute        = dateParams.minute();
    }

    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mDownscaleCoeff,            static_cast<const DoubleField *>  (fields()[DOWNSCALE_COEFF_ID]));
        visitor.visit(mMotionThreshold,           static_cast<const DoubleField *>  (fields()[MOTION_THRESHOLD_ID]));
        visitor.visit(mDiffThreshold,             static_cast<const IntField *>     (fields()[DIFF_THRESHOLD_ID]));
        visitor.visit(mProduceDebug,              static_cast<const BoolField *>    (fields()[PRODUCE_DEBUG_ID]));
        visitor.visit(mDebugImageIndex,           static_cast<const IntField *>     (fields()[DEBUGIMAGEINDEX_ID]));
        visitor.visit(mDifferenceBasedAnalysis,   static_cast<const BoolField *>    (fields()[DIFFERENCE_BASED_ANALYSIS_ID]));
        visitor.visit(mMotionBasedAnalysis,       static_cast<const BoolField *>    (fields()[MOTION_BASED_ANALYSIS_ID]));
        visitor.visit(mTotalThreshold,            static_cast<const DoubleField *>  (fields()[TOTAL_THRESHOLD_ID]));
        visitor.visit(mValidMotionBinHeight,      static_cast<const IntField *>     (fields()[VALID_MOTION_BIN_HEIGHT_ID]));
        visitor.visit(mDebugObjects,              static_cast<const BoolField *>    (fields()[DEBUG_OBJECTS_ID]));
        visitor.visit(mExperimental,              static_cast<const BoolField *>    (fields()[EXPERIMENTAL_ID]));
        visitor.visit(mMinimumCluster,            static_cast<const IntField *>     (fields()[MINIMUM_CLUSTER_ID]));
        visitor.visit(mDilateSize,                static_cast<const IntField *>     (fields()[DILATE_SIZE_ID]));
        visitor.visit(mBgThreshold,               static_cast<const IntField *>     (fields()[BG_THRESHOLD_ID]));
        visitor.visit(mFgThreshold,               static_cast<const DoubleField *>  (fields()[FG_THRESHOLD_ID]));
        visitor.visit(mUseVirtualDate,            static_cast<const BoolField *>    (fields()[USE_VIRTUAL_DATE_ID]));
        visitor.visit(mYear,                      static_cast<const IntField *>     (fields()[YEAR_ID]));
        visitor.visit(mMonth,                     static_cast<const IntField *>     (fields()[MONTH_ID]));
        visitor.visit(mDay,                       static_cast<const IntField *>     (fields()[DAY_ID]));
        visitor.visit(mHour,                      static_cast<const IntField *>     (fields()[HOUR_ID]));
        visitor.visit(mMinute,                    static_cast<const IntField *>     (fields()[MINUTE_ID]));
    }

    AnalysisParams()
    {
        DefaultSetter setter;
        accept(setter);
    }

    AnalysisParams(
          double downscaleCoeff
        , double motionThreshold
        , int diffThreshold
        , bool produceDebug
        , int debugImageIndex
        , bool differenceBasedAnalysis
        , bool motionBasedAnalysis
        , double totalThreshold
        , int validMotionBinHeight
        , bool debugObjects
        , bool experimental
        , int minimumCluster
        , int dilateSize
        , int bgThreshold
        , double fgThreshold
        , bool useVirtualDate
        , int year
        , int month
        , int day
        , int hour
        , int minute
    )
    {
        mDownscaleCoeff = downscaleCoeff;
        mMotionThreshold = motionThreshold;
        mDiffThreshold = diffThreshold;
        mProduceDebug = produceDebug;
        mDebugImageIndex = debugImageIndex;
        mDifferenceBasedAnalysis = differenceBasedAnalysis;
        mMotionBasedAnalysis = motionBasedAnalysis;
        mTotalThreshold = totalThreshold;
        mValidMotionBinHeight = validMotionBinHeight;
        mDebugObjects = debugObjects;
        mExperimental = experimental;
        mMinimumCluster = minimumCluster;
        mDilateSize = dilateSize;
        mBgThreshold = bgThreshold;
        mFgThreshold = fgThreshold;
        mUseVirtualDate = useVirtualDate;
        mYear = year;
        mMonth = month;
        mDay = day;
        mHour = hour;
        mMinute = minute;
    }

    friend ostream& operator << (ostream &out, AnalysisParams &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //ANALYSIS_PARAMS_H_
